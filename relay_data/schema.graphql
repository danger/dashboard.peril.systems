# source: https://staging-api.peril.systems/api/graphql
# timestamp: Sun Sep 09 2018 09:05:52 GMT-0400 (EDT)

scalar Date

type Error {
  description: String!
  context: String
}

"""An installation of Peril, ideally not too tightly tied to GH"""
type Installation implements Node {
  """The MongoDB ID"""
  id: ID!

  """The installation ID, in the real sense"""
  iID: Int!

  """The path to the Dangerfile"""
  perilSettingsJSONURL: String!

  """The name of a user/org which the installation is attached to"""
  login: String!

  """The URL for an image representing the installation owner"""
  avatarURL: String

  """A set of per repo rules"""
  repos: JSON!

  """Rules that are for all repos"""
  rules: JSON!

  """Scheduled tasks to run repeatedly"""
  scheduler: JSON!

  """Installation settings, for example ignored repos"""
  settings: JSON!

  """Tasks which you can schedule to run in the future"""
  tasks: JSON!

  """Saved webhooks which can be re-sent"""
  webhooks(
    """Returns the first n elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): RecordedWebhookConnection!

  """User-environment variables"""
  envVars: JSON

  """
  If this is set to be in the future, any webhook for this installation will get saved in the db
  """
  recordWebhooksUntilTime: String

  """The time when a user requested recording webhooks"""
  startedRecordingWebhooksTime: String

  """
  A URL for Slack which Peril can send notifications about an installation to
  """
  installationSlackUpdateWebhookURL: String
}

"""A connection to a list of items."""
type InstallationConnection {
  """A list of edges."""
  edges: [InstallationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type InstallationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge"""
  node: Installation
}

"""
Basically a way to say this is going to be untyped data (it's normally user input)
"""
scalar JSON

type Mutation {
  """
  Only really lets you set the perilSettingsJSONURL - which is kinda important for setting up y'know?
  """
  convertPartialInstallation(iID: Int!, perilSettingsJSONURL: String): MutationWithInstallationOrError

  """
  Building this out incrementally, but basically this provides
  the ability to set changes
  """
  editInstallation(iID: Int!, perilSettingsJSONURL: String, installationSlackUpdateWebhookURL: String): MutationWithInstallationOrError

  """Sets the installation to record webhooks for the next 5m"""
  makeInstallationRecord(iID: Int!): MutationWithInstallationOrError

  """Send webhook"""
  sendWebhookForInstallation(iID: Int!, eventID: String!): RecordedWebhook

  """
  Adds/edits/removes a new ENV var to an installation.
  Returns the whole env for the installation.
  """
  changeEnvVarForInstallation(iID: Int!, key: String!, value: String): JSON

  """Trigger a named task from the installation's settings """
  runTask(iID: Int!, task: String!, data: JSON): MutationWithSuccess

  """
  Schedule a named task, with a JWT passed by Peril to a unique sandbox run
  """
  scheduleTask(jwt: String!, task: String!, time: String!, data: String!): MutationWithSuccess

  """
  Triggers a message to admins in the dashboard, and prepares to grab the logs
  """
  dangerfileFinished(jwt: String!, name: String!, dangerfiles: [String!]!, time: Int!, hyperCallID: String!): MutationWithSuccess
}

type MutationError {
  error: Error
}

union MutationWithInstallationOrError = Installation | MutationError

type MutationWithSuccess {
  success: Boolean
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection.'"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""An installation of Peril which isn't set up yet"""
type PartialInstallation implements Node {
  """The MongoDB ID"""
  id: ID!

  """The installation ID, in the real sense"""
  iID: Int!

  """The name of the installation owner"""
  login: String!

  """The URL for an image representing the installation owner"""
  avatarURL: String!
}

"""A connection to a list of items."""
type PartialInstallationConnection {
  """A list of edges."""
  edges: [PartialInstallationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type PartialInstallationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge"""
  node: PartialInstallation
}

"""Root"""
type Query {
  """The logged in user"""
  me: User

  """Get information about an installation"""
  installation(iID: Int!): Installation

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

"""A stored webhook from GitHub so we can re-send it in the future"""
type RecordedWebhook {
  """Installation ID"""
  iID: Int!

  """A string like 'pull_request.closed' to show the preview"""
  event: String!

  """The webhook JSON, it will not be included in collections of webhooks"""
  json: JSON

  """The UUID from GitHub for the webhook"""
  eventID: String!

  """The time when the recording was made"""
  createdAt: Date!
}

"""A connection to a list of items."""
type RecordedWebhookConnection {
  """A list of edges."""
  edges: [RecordedWebhookEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type RecordedWebhookEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge"""
  node: RecordedWebhook
}

"""Someone logged in to the API, all user data is stored inside the JWT"""
type User {
  """Display name"""
  name: String!

  """Use this to show an avatar"""
  avatarURL: String!

  """The installations that a user has access to"""
  installations(
    """Returns the first n elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): InstallationConnection!

  """
  The installations that a user has access to, but hasn't been set up yet
  """
  installationsToSetUp(
    """Returns the first n elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): PartialInstallationConnection!
}
